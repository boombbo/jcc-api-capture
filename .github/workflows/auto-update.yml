name: Auto Update

on:
  # 当推送到main分支时触发
  push:
    branches: [main]

  # 允许手动触发
  workflow_dispatch:
    inputs:
      version_type:
        description: "版本更新类型 (major/minor/patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      commit_message:
        description: "提交信息"
        required: true
        default: "自动更新"
        type: string

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-dotenv

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n $(git status -s) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create version tag
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # 获取最新的版本标签
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # 解析版本号
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"

          # 根据更新类型增加版本号
          case "${{ github.event.inputs.version_type || 'patch' }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            *)
              patch=$((patch + 1))
              ;;
          esac

          # 创建新的版本标签
          new_tag="v${major}.${minor}.${patch}"
          echo "NEW_VERSION=${new_tag}" >> $GITHUB_ENV

          # 添加所有更改
          git add .

          # 提交更改
          commit_message="${{ github.event.inputs.commit_message || '自动更新' }}"
          git commit -m "${commit_message} ${new_tag}"

          # 创建新标签
          git tag -a "${new_tag}" -m "版本 ${new_tag}"

      - name: Push changes and tags
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push
          git push --tags

      - name: Create Release
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: "Release ${{ env.NEW_VERSION }}"
          body: |
            ## 更新内容
            ${{ github.event.inputs.commit_message || '自动更新' }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
